import asyncio
import random
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.utils import log
from bot.states import StatesList
from bot.config import config

from bot.db.requests import *
from bot.utils.helper import is_user_subscribed, get_release_text
from bot.keyboards.user_keyboard import make_inline_keyboard, make_channels_keyboard

router = Router()

@router.message(commands=['start'])
async def start_handler(message: Message, state: FSMContext, session: AsyncSession) -> None:
    current_state = await state.get_state()
    if current_state == StatesList.waiting.state:
        await message.answer('üî•<b>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–ª–ª–∞</b>üî•')
    else:
        await state.set_state(StatesList.started)
        await add_user(session, message.from_user.id, message.from_user.first_name, StatesList.started._state)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç–µ–±—è –∂–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å TikToküîû\n\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', 
            reply_markup=make_inline_keyboard('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µüîû', 'start_callback')
        )
        log.info(f'User {message.from_user.first_name} started bot!')
        
@router.callback_query(StatesList.started, text='start_callback')
async def subscribe_handler(call: CallbackQuery, state: FSMContext, session: AsyncSession) -> None:
    await state.set_state(StatesList.subscribe)
    await update_status(session, call.from_user.id, StatesList.subscribe._state)
    msg = await call.message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ, <b>–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!</b>')
    await call.message.delete()
    await msg.answer('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', reply_markup=make_channels_keyboard())

@router.callback_query(StatesList.subscribe, text='check_subscribe')
async def check_subscribe_handler(call: CallbackQuery, bot: Bot, state: FSMContext, session: AsyncSession) -> None:
    user_id = call.from_user.id
    if await is_user_subscribed(bot, user_id):
        await state.set_state(StatesList.waiting)
        await update_status(session, user_id, StatesList.waiting._state)
        await call.answer('–£—Å–ø–µ—à–Ω–æ!', show_alert=False)
        rel_time = random.randint(1, 4) if config.release_time == 'random' else int(config.release_time)
        msg = await call.message.answer(f'–ò–∑-–∑–∞ –±–æ–ª—å—à–æ–π –Ω–∞—Ä—É–∑–∫–∏, –º—ã –≤—ã—à–ª–µ–º –≤–∞–º —Ñ—É–ª–ª —á–µ—Ä–µ–∑ <b>{get_release_text(rel_time)}</b>\n‚ö†Ô∏è<b>–ó–ê –≠–¢–û –í–†–ï–ú–Ø –ù–ï–õ–¨–ó–Ø –û–¢–ü–ò–°–´–í–ê–¢–¨–°–Ø –û–¢ –°–ü–û–ù–°–û–†–û–í!</b>‚ö†Ô∏è')
        await call.message.delete()
        await asyncio.sleep(rel_time * 0 + 20)
    
        if await is_user_subscribed(bot, user_id):
            await msg.delete()
            await bot.send_message(
                user_id, 
                'üî• <b>–î–ï–†–ñ–ò –°–í–û–ô –§–£–õ–õ</b> üî•', 
                reply_markup=make_inline_keyboard('üî•–§–£–õ–õ –ñ–ú–òüî•', config.full_link, url_mode=True)
            )
            await update_status(session, user_id, 'subscribe_done')
            await state.clear()
        else:
            await msg.delete()
            await bot.send_message(
                user_id, 
                '‚ö†Ô∏è\n<b>–í–´ –û–¢–ü–ò–°–ê–õ–ò–°–¨ –û–¢ –°–ü–û–ù–°–û–†–û–í\n–ü–û–í–¢–û–†–ò–¢–ï –ü–û–î–ü–ò–°–ö–£</b>\n‚ö†Ô∏è',
                reply_markup=make_channels_keyboard()
            )
            await state.set_state(StatesList.subscribe)
            await update_status(session, user_id, StatesList.subscribe._state)
    else:
        await call.answer('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.', show_alert=True)